// https://www.digitalocean.com/community/tutorials/understanding-nginx-server-and-location-block-selection-algorithms#parsing-the-server_name-directive-to-choose-a-match
import { Project } from '@mosaiq/nsm-common/types';
import { getServerName } from '@mosaiq/nsm-common/nginx';

export const getControlPlaneNginxConfigForProject = async (project: Project, workerAddress: string) => {
    const conf = project.nginxConfig;
    if (!conf) {
        throw new Error(`Invalid project configuration`);
    }

    const servers: string[] = [];
    for (const server of conf.servers) {
        const hostnames = server.wildcardSubdomain ? [server.domain, `*.${server.domain}`] : [server.domain];
        const paths: string[] = server.locations.map((loc) => loc.path);
        const server80 = getWorkerServer(hostnames, paths, workerAddress, false);
        servers.push(server80);
        const server443 = getWorkerServer(hostnames, paths, workerAddress, true);
        servers.push(server443);
    }

    return `
# Generated by the Node Server Manager ${new Date().toISOString()}
${servers.join('\n')}
`;
};

const getWorkerServer = (hostnames: string[], paths: string[], worker: string, isHttps: boolean) => {
    return `
server {
    ${getServerName(hostnames)}
    listen ${isHttps ? 443 : 80};
    ${paths.map((p) => getWorkerProxyLocation(p, worker, isHttps)).join('\n')}
}`;
};

const getWorkerProxyLocation = (path: string, worker: string, isHttps: boolean) => {
    return `
    location ${path} {
        proxy_pass ${isHttps ? 'https' : 'http'}://${worker};
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header Host $host;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Scheme $scheme;
    }`;
};
